

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Sep 18 15:38:32 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     7                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 12/10/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0004                     fsr             equ	4
    49     0004                     fsr0            equ	4
    50     0000                     indf            equ	0
    51     0000                     indf0           equ	0
    52     0002                     pc              equ	2
    53     0002                     pcl             equ	2
    54     000A                     pclath          equ	10
    55     0003                     status          equ	3
    56     0000                     INDF            equ	0	;# 
    57     0001                     TMR0            equ	1	;# 
    58     0002                     PCL             equ	2	;# 
    59     0003                     STATUS          equ	3	;# 
    60     0004                     FSR             equ	4	;# 
    61     0005                     PORTA           equ	5	;# 
    62     0006                     PORTB           equ	6	;# 
    63     0007                     PORTC           equ	7	;# 
    64     0008                     PORTD           equ	8	;# 
    65     0009                     PORTE           equ	9	;# 
    66     000A                     PCLATH          equ	10	;# 
    67     000B                     INTCON          equ	11	;# 
    68     000C                     PIR1            equ	12	;# 
    69     000D                     PIR2            equ	13	;# 
    70     000E                     TMR1            equ	14	;# 
    71     000E                     TMR1L           equ	14	;# 
    72     000F                     TMR1H           equ	15	;# 
    73     0010                     T1CON           equ	16	;# 
    74     0011                     TMR2            equ	17	;# 
    75     0012                     T2CON           equ	18	;# 
    76     0013                     SSPBUF          equ	19	;# 
    77     0014                     SSPCON          equ	20	;# 
    78     0015                     CCPR1           equ	21	;# 
    79     0015                     CCPR1L          equ	21	;# 
    80     0016                     CCPR1H          equ	22	;# 
    81     0017                     CCP1CON         equ	23	;# 
    82     0018                     RCSTA           equ	24	;# 
    83     0019                     TXREG           equ	25	;# 
    84     001A                     RCREG           equ	26	;# 
    85     001B                     CCPR2           equ	27	;# 
    86     001B                     CCPR2L          equ	27	;# 
    87     001C                     CCPR2H          equ	28	;# 
    88     001D                     CCP2CON         equ	29	;# 
    89     001E                     ADRESH          equ	30	;# 
    90     001F                     ADCON0          equ	31	;# 
    91     0081                     OPTION_REG      equ	129	;# 
    92     0085                     TRISA           equ	133	;# 
    93     0086                     TRISB           equ	134	;# 
    94     0087                     TRISC           equ	135	;# 
    95     0088                     TRISD           equ	136	;# 
    96     0089                     TRISE           equ	137	;# 
    97     008C                     PIE1            equ	140	;# 
    98     008D                     PIE2            equ	141	;# 
    99     008E                     PCON            equ	142	;# 
   100     0091                     SSPCON2         equ	145	;# 
   101     0092                     PR2             equ	146	;# 
   102     0093                     SSPADD          equ	147	;# 
   103     0094                     SSPSTAT         equ	148	;# 
   104     0098                     TXSTA           equ	152	;# 
   105     0099                     SPBRG           equ	153	;# 
   106     009C                     CMCON           equ	156	;# 
   107     009D                     CVRCON          equ	157	;# 
   108     009E                     ADRESL          equ	158	;# 
   109     009F                     ADCON1          equ	159	;# 
   110     010C                     EEDATA          equ	268	;# 
   111     010D                     EEADR           equ	269	;# 
   112     010E                     EEDATH          equ	270	;# 
   113     010F                     EEADRH          equ	271	;# 
   114     018C                     EECON1          equ	396	;# 
   115     018D                     EECON2          equ	397	;# 
   116     0000                     INDF            equ	0	;# 
   117     0001                     TMR0            equ	1	;# 
   118     0002                     PCL             equ	2	;# 
   119     0003                     STATUS          equ	3	;# 
   120     0004                     FSR             equ	4	;# 
   121     0005                     PORTA           equ	5	;# 
   122     0006                     PORTB           equ	6	;# 
   123     0007                     PORTC           equ	7	;# 
   124     0008                     PORTD           equ	8	;# 
   125     0009                     PORTE           equ	9	;# 
   126     000A                     PCLATH          equ	10	;# 
   127     000B                     INTCON          equ	11	;# 
   128     000C                     PIR1            equ	12	;# 
   129     000D                     PIR2            equ	13	;# 
   130     000E                     TMR1            equ	14	;# 
   131     000E                     TMR1L           equ	14	;# 
   132     000F                     TMR1H           equ	15	;# 
   133     0010                     T1CON           equ	16	;# 
   134     0011                     TMR2            equ	17	;# 
   135     0012                     T2CON           equ	18	;# 
   136     0013                     SSPBUF          equ	19	;# 
   137     0014                     SSPCON          equ	20	;# 
   138     0015                     CCPR1           equ	21	;# 
   139     0015                     CCPR1L          equ	21	;# 
   140     0016                     CCPR1H          equ	22	;# 
   141     0017                     CCP1CON         equ	23	;# 
   142     0018                     RCSTA           equ	24	;# 
   143     0019                     TXREG           equ	25	;# 
   144     001A                     RCREG           equ	26	;# 
   145     001B                     CCPR2           equ	27	;# 
   146     001B                     CCPR2L          equ	27	;# 
   147     001C                     CCPR2H          equ	28	;# 
   148     001D                     CCP2CON         equ	29	;# 
   149     001E                     ADRESH          equ	30	;# 
   150     001F                     ADCON0          equ	31	;# 
   151     0081                     OPTION_REG      equ	129	;# 
   152     0085                     TRISA           equ	133	;# 
   153     0086                     TRISB           equ	134	;# 
   154     0087                     TRISC           equ	135	;# 
   155     0088                     TRISD           equ	136	;# 
   156     0089                     TRISE           equ	137	;# 
   157     008C                     PIE1            equ	140	;# 
   158     008D                     PIE2            equ	141	;# 
   159     008E                     PCON            equ	142	;# 
   160     0091                     SSPCON2         equ	145	;# 
   161     0092                     PR2             equ	146	;# 
   162     0093                     SSPADD          equ	147	;# 
   163     0094                     SSPSTAT         equ	148	;# 
   164     0098                     TXSTA           equ	152	;# 
   165     0099                     SPBRG           equ	153	;# 
   166     009C                     CMCON           equ	156	;# 
   167     009D                     CVRCON          equ	157	;# 
   168     009E                     ADRESL          equ	158	;# 
   169     009F                     ADCON1          equ	159	;# 
   170     010C                     EEDATA          equ	268	;# 
   171     010D                     EEADR           equ	269	;# 
   172     010E                     EEDATH          equ	270	;# 
   173     010F                     EEADRH          equ	271	;# 
   174     018C                     EECON1          equ	396	;# 
   175     018D                     EECON2          equ	397	;# 
   176     001E                     _ADRESH         set	30
   177     001F                     _ADCON0bits     set	31
   178     001F                     _ADCON0         set	31
   179     0006                     _PORTBbits      set	6
   180     009E                     _ADRESL         set	158
   181     009F                     _ADCON1         set	159
   182     0086                     _TRISBbits      set	134
   183                           
   184                           	psect	cinit
   185     07FC                     start_initialization:	
   186                           ; #config settings
   187                           
   188     07FC                     __initialization:
   189     07FC                     end_of_initialization:	
   190                           ;End of C runtime variable initialization code
   191                           
   192     07FC                     __end_of__initialization:
   193     07FC  0183               	clrf	3
   194     07FD  120A  118A  2F94   	ljmp	_main	;jump to C main() function
   195                           
   196                           	psect	cstackCOMMON
   197     0070                     __pcstackCOMMON:
   198     0070                     ?_configure_ADC:
   199     0070                     ?_start_ADC_conversion:	
   200                           ; 1 bytes @ 0x0
   201                           
   202     0070                     ?_wait_for_conversion:	
   203                           ; 1 bytes @ 0x0
   204                           
   205     0070                     ?_read_ADC_result:	
   206                           ; 1 bytes @ 0x0
   207                           
   208     0070                     ?_main:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     0070                     read_ADC_result@ADC_result:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0070                     ??_configure_ADC:	
   215                           ; 2 bytes @ 0x0
   216                           
   217     0070                     ??_start_ADC_conversion:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0070                     ??_wait_for_conversion:	
   221                           ; 1 bytes @ 0x0
   222                           
   223     0070                     ??_read_ADC_result:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 1 bytes @ 0x0
   228     0070                     	ds	2
   229     0072                     ??_main:
   230                           
   231                           ; 1 bytes @ 0x2
   232     0072                     	ds	3
   233                           
   234                           	psect	maintext
   235     0794                     __pmaintext:	
   236 ;;
   237 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   238 ;;
   239 ;; *************** function _main *****************
   240 ;; Defined at:
   241 ;;		line 35 in file "newmain.c"
   242 ;; Parameters:    Size  Location     Type
   243 ;;		None
   244 ;; Auto vars:     Size  Location     Type
   245 ;;		None
   246 ;; Return value:  Size  Location     Type
   247 ;;                  1    wreg      void 
   248 ;; Registers used:
   249 ;;		wreg, status,2, status,0, pclath, cstack
   250 ;; Tracked objects:
   251 ;;		On entry : B00/0
   252 ;;		On exit  : 0/0
   253 ;;		Unchanged: 0/0
   254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   255 ;;      Params:         0       0       0       0       0
   256 ;;      Locals:         0       0       0       0       0
   257 ;;      Temps:          3       0       0       0       0
   258 ;;      Totals:         3       0       0       0       0
   259 ;;Total ram usage:        3 bytes
   260 ;; Hardware stack levels required when called: 1
   261 ;; This function calls:
   262 ;;		_configure_ADC
   263 ;;		_read_ADC_result
   264 ;;		_start_ADC_conversion
   265 ;;		_wait_for_conversion
   266 ;; This function is called by:
   267 ;;		Startup code after reset
   268 ;; This function uses a non-reentrant model
   269 ;;
   270                           
   271     0794                     _main:	
   272                           ;psect for function _main
   273                           
   274     0794                     l625:	
   275                           ;incstack = 0
   276                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   277                           
   278                           
   279                           ;newmain.c: 37: 
   280     0794  1683               	bsf	3,5	;RP0=1, select bank1
   281     0795  1303               	bcf	3,6	;RP1=0, select bank1
   282     0796  1006               	bcf	6,0	;volatile
   283                           
   284                           ;newmain.c: 38: 
   285     0797  1086               	bcf	6,1	;volatile
   286                           
   287                           ;newmain.c: 39: void configure_ADC(void) {
   288     0798  1106               	bcf	6,2	;volatile
   289                           
   290                           ;newmain.c: 40:     ADCON0 = 0x41;
   291     0799  1186               	bcf	6,3	;volatile
   292                           
   293                           ;newmain.c: 43: }
   294     079A  1283               	bcf	3,5	;RP0=0, select bank0
   295     079B  1303               	bcf	3,6	;RP1=0, select bank0
   296     079C  1006               	bcf	6,0	;volatile
   297                           
   298                           ;newmain.c: 44: 
   299     079D  1086               	bcf	6,1	;volatile
   300                           
   301                           ;newmain.c: 45: 
   302     079E  1106               	bcf	6,2	;volatile
   303                           
   304                           ;newmain.c: 46: void start_ADC_conversion(void) {
   305     079F  1186               	bcf	6,3	;volatile
   306     07A0                     l627:
   307                           
   308                           ;newmain.c: 49: 
   309     07A0  120A  118A  278B  120A  118A  	fcall	_configure_ADC
   310     07A5                     l29:	
   311                           ;newmain.c: 51: void wait_for_conversion(void) {
   312                           
   313                           
   314                           ;newmain.c: 53: }
   315     07A5  120A  118A  2780  120A  118A  	fcall	_start_ADC_conversion
   316                           
   317                           ;newmain.c: 56: void read_ADC_result(void) {
   318     07AA  120A  118A  2784  120A  118A  	fcall	_wait_for_conversion
   319     07AF                     l629:
   320                           
   321                           ;newmain.c: 59: 
   322     07AF  120A  118A  27C5  120A  118A  	fcall	_read_ADC_result
   323                           
   324                           ;newmain.c: 62:     PORTBbits.RB2 = 0;
   325     07B4  3006               	movlw	6
   326     07B5  00F4               	movwf	??_main+2
   327     07B6  3013               	movlw	19
   328     07B7  00F3               	movwf	??_main+1
   329     07B8  30AD               	movlw	173
   330     07B9  00F2               	movwf	??_main
   331     07BA                     u67:
   332     07BA  0BF2               	decfsz	??_main,f
   333     07BB  2FBA               	goto	u67
   334     07BC  0BF3               	decfsz	??_main+1,f
   335     07BD  2FBA               	goto	u67
   336     07BE  0BF4               	decfsz	??_main+2,f
   337     07BF  2FBA               	goto	u67
   338     07C0  2FC1               	nop2
   339     07C1  2FA5               	goto	l29
   340     07C2  120A  118A  2800   	ljmp	start
   341     07C5                     __end_of_main:
   342                           
   343                           	psect	text1
   344     0784                     __ptext1:	
   345 ;; *************** function _wait_for_conversion *****************
   346 ;; Defined at:
   347 ;;		line 79 in file "newmain.c"
   348 ;; Parameters:    Size  Location     Type
   349 ;;		None
   350 ;; Auto vars:     Size  Location     Type
   351 ;;		None
   352 ;; Return value:  Size  Location     Type
   353 ;;                  1    wreg      void 
   354 ;; Registers used:
   355 ;;		None
   356 ;; Tracked objects:
   357 ;;		On entry : 0/0
   358 ;;		On exit  : 0/0
   359 ;;		Unchanged: 0/0
   360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   361 ;;      Params:         0       0       0       0       0
   362 ;;      Locals:         0       0       0       0       0
   363 ;;      Temps:          0       0       0       0       0
   364 ;;      Totals:         0       0       0       0       0
   365 ;;Total ram usage:        0 bytes
   366 ;; Hardware stack levels used: 1
   367 ;; This function calls:
   368 ;;		Nothing
   369 ;; This function is called by:
   370 ;;		_main
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374     0784                     _wait_for_conversion:	
   375                           ;psect for function _wait_for_conversion
   376                           
   377     0784                     l599:	
   378                           ;incstack = 0
   379                           ; Regs used in _wait_for_conversion: []
   380                           
   381     0784                     l41:	
   382                           ;newmain.c: 80:         PORTBbits.RB3 = 1;
   383                           
   384     0784  1283               	bcf	3,5	;RP0=0, select bank0
   385     0785  1303               	bcf	3,6	;RP1=0, select bank0
   386     0786  191F               	btfsc	31,2	;volatile
   387     0787  2F89               	goto	u11
   388     0788  2F8A               	goto	u10
   389     0789                     u11:
   390     0789  2F84               	goto	l41
   391     078A                     u10:
   392     078A                     l44:
   393     078A  0008               	return
   394     078B                     __end_of_wait_for_conversion:
   395                           
   396                           	psect	text2
   397     0780                     __ptext2:	
   398 ;; *************** function _start_ADC_conversion *****************
   399 ;; Defined at:
   400 ;;		line 74 in file "newmain.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  1    wreg      void 
   407 ;; Registers used:
   408 ;;		None
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         0       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0
   417 ;;      Totals:         0       0       0       0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels used: 1
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427     0780                     _start_ADC_conversion:	
   428                           ;psect for function _start_ADC_conversion
   429                           
   430     0780                     l597:	
   431                           ;incstack = 0
   432                           ; Regs used in _start_ADC_conversion: []
   433                           
   434                           
   435                           ;newmain.c: 75: 
   436     0780  1283               	bcf	3,5	;RP0=0, select bank0
   437     0781  1303               	bcf	3,6	;RP1=0, select bank0
   438     0782  151F               	bsf	31,2	;volatile
   439     0783                     l38:
   440     0783  0008               	return
   441     0784                     __end_of_start_ADC_conversion:
   442                           
   443                           	psect	text3
   444     07C5                     __ptext3:	
   445 ;; *************** function _read_ADC_result *****************
   446 ;; Defined at:
   447 ;;		line 84 in file "newmain.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;  ADC_result      2    0[COMMON] unsigned short 
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   461 ;;      Params:         0       0       0       0       0
   462 ;;      Locals:         2       0       0       0       0
   463 ;;      Temps:          0       0       0       0       0
   464 ;;      Totals:         2       0       0       0       0
   465 ;;Total ram usage:        2 bytes
   466 ;; Hardware stack levels used: 1
   467 ;; This function calls:
   468 ;;		Nothing
   469 ;; This function is called by:
   470 ;;		_main
   471 ;; This function uses a non-reentrant model
   472 ;;
   473                           
   474     07C5                     _read_ADC_result:	
   475                           ;psect for function _read_ADC_result
   476                           
   477     07C5                     l601:	
   478                           ;incstack = 0
   479                           ; Regs used in _read_ADC_result: [wreg]
   480                           
   481     07C5  1283               	bcf	3,5	;RP0=0, select bank0
   482     07C6  1303               	bcf	3,6	;RP1=0, select bank0
   483     07C7  081E               	movf	30,w	;volatile
   484     07C8  00F1               	movwf	read_ADC_result@ADC_result+1
   485     07C9  1683               	bsf	3,5	;RP0=1, select bank1
   486     07CA  1303               	bcf	3,6	;RP1=0, select bank1
   487     07CB  081E               	movf	30,w	;volatile
   488     07CC  00F0               	movwf	read_ADC_result@ADC_result
   489     07CD                     l603:
   490     07CD  1283               	bcf	3,5	;RP0=0, select bank0
   491     07CE  1303               	bcf	3,6	;RP1=0, select bank0
   492     07CF  1006               	bcf	6,0	;volatile
   493     07D0                     l605:
   494     07D0  1086               	bcf	6,1	;volatile
   495     07D1                     l607:
   496     07D1  1106               	bcf	6,2	;volatile
   497     07D2                     l609:
   498     07D2  1186               	bcf	6,3	;volatile
   499     07D3  3000               	movlw	0
   500     07D4  0271               	subwf	read_ADC_result@ADC_result+1,w
   501     07D5  30FB               	movlw	251
   502     07D6  1903               	skipnz
   503     07D7  0270               	subwf	read_ADC_result@ADC_result,w
   504     07D8  1C03               	skipc
   505     07D9  2FDB               	goto	u21
   506     07DA  2FDC               	goto	u20
   507     07DB                     u21:
   508     07DB  2FDD               	goto	l613
   509     07DC                     u20:
   510     07DC                     l611:
   511     07DC  1406               	bsf	6,0	;volatile
   512     07DD                     l613:
   513     07DD  3001               	movlw	1
   514     07DE  0271               	subwf	read_ADC_result@ADC_result+1,w
   515     07DF  30F5               	movlw	245
   516     07E0  1903               	skipnz
   517     07E1  0270               	subwf	read_ADC_result@ADC_result,w
   518     07E2  1C03               	skipc
   519     07E3  2FE5               	goto	u31
   520     07E4  2FE6               	goto	u30
   521     07E5                     u31:
   522     07E5  2FE7               	goto	l617
   523     07E6                     u30:
   524     07E6                     l615:
   525     07E6  1486               	bsf	6,1	;volatile
   526     07E7                     l617:
   527     07E7  3002               	movlw	2
   528     07E8  0271               	subwf	read_ADC_result@ADC_result+1,w
   529     07E9  30EF               	movlw	239
   530     07EA  1903               	skipnz
   531     07EB  0270               	subwf	read_ADC_result@ADC_result,w
   532     07EC  1C03               	skipc
   533     07ED  2FEF               	goto	u41
   534     07EE  2FF0               	goto	u40
   535     07EF                     u41:
   536     07EF  2FF1               	goto	l621
   537     07F0                     u40:
   538     07F0                     l619:
   539     07F0  1506               	bsf	6,2	;volatile
   540     07F1                     l621:
   541     07F1  3003               	movlw	3
   542     07F2  0271               	subwf	read_ADC_result@ADC_result+1,w
   543     07F3  30E9               	movlw	233
   544     07F4  1903               	skipnz
   545     07F5  0270               	subwf	read_ADC_result@ADC_result,w
   546     07F6  1C03               	skipc
   547     07F7  2FF9               	goto	u51
   548     07F8  2FFA               	goto	u50
   549     07F9                     u51:
   550     07F9  2FFB               	goto	l51
   551     07FA                     u50:
   552     07FA                     l623:
   553     07FA  1586               	bsf	6,3	;volatile
   554     07FB                     l51:
   555     07FB  0008               	return
   556     07FC                     __end_of_read_ADC_result:
   557                           
   558                           	psect	text4
   559     078B                     __ptext4:	
   560 ;; *************** function _configure_ADC *****************
   561 ;; Defined at:
   562 ;;		line 67 in file "newmain.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		None
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   576 ;;      Params:         0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels used: 1
   582 ;; This function calls:
   583 ;;		Nothing
   584 ;; This function is called by:
   585 ;;		_main
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589     078B                     _configure_ADC:	
   590                           ;psect for function _configure_ADC
   591                           
   592     078B                     l595:	
   593                           ;incstack = 0
   594                           ; Regs used in _configure_ADC: []
   595                           
   596                           
   597                           ;newmain.c: 68:         PORTBbits.RB0 = 1;
   598     078B  3041               	movlw	65
   599     078C  1283               	bcf	3,5	;RP0=0, select bank0
   600     078D  1303               	bcf	3,6	;RP1=0, select bank0
   601     078E  009F               	movwf	31	;volatile
   602                           
   603                           ;newmain.c: 69:     }
   604     078F  3080               	movlw	128
   605     0790  1683               	bsf	3,5	;RP0=1, select bank1
   606     0791  1303               	bcf	3,6	;RP1=0, select bank1
   607     0792  009F               	movwf	31	;volatile
   608     0793                     l35:
   609     0793  0008               	return
   610     0794                     __end_of_configure_ADC:
   611     0002                     ___latbits      equ	2
   612     007E                     btemp           set	126	;btemp
   613     007E                     wtemp0          set	126
   614                           
   615                           	psect	config
   616                           
   617                           ;Config register CONFIG @ 0x2007
   618                           ;	Oscillator Selection bits
   619                           ;	FOSC = XT, XT oscillator
   620                           ;	Watchdog Timer Enable bit
   621                           ;	WDTE = OFF, WDT disabled
   622                           ;	Power-up Timer Enable bit
   623                           ;	PWRTE = OFF, PWRT disabled
   624                           ;	Brown-out Reset Enable bit
   625                           ;	BOREN = ON, BOR enabled
   626                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   627                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   628                           ;	Data EEPROM Memory Code Protection bit
   629                           ;	CPD = OFF, Data EEPROM code protection off
   630                           ;	Flash Program Memory Write Enable bits
   631                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   632                           ;	In-Circuit Debugger Mode bit
   633                           ;	DEBUG = 0x1, unprogrammed default
   634                           ;	Flash Program Memory Code Protection bit
   635                           ;	CP = OFF, Code protection off
   636     2007                     	org	8199
   637     2007  3F79               	dw	16249

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       5
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_read_ADC_result

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0      60
                                              2 COMMON     3     3      0
                      _configure_ADC
                    _read_ADC_result
               _start_ADC_conversion
                _wait_for_conversion
 ---------------------------------------------------------------------------------
 (1) _wait_for_conversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _start_ADC_conversion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_ADC_result                                      2     2      0      60
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _configure_ADC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _configure_ADC
   _read_ADC_result
   _start_ADC_conversion
   _wait_for_conversion

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      5       5     35.7%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       5      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Sep 18 15:38:32 2024

              ?_configure_ADC 0070                            l41 0784                            l35 0793  
                          l51 07FB                            l44 078A                            l29 07A5  
                          l38 0783                            u10 078A                            u11 0789  
                          u20 07DC                            u21 07DB                            u30 07E6  
                          u31 07E5                            u40 07F0                            u41 07EF  
                          u50 07FA                            u51 07F9                            u67 07BA  
                         l601 07C5                           l611 07DC                           l603 07CD  
                         l621 07F1                           l613 07DD                           l605 07D0  
                         l623 07FA                           l615 07E6                           l607 07D1  
                         l617 07E7                           l609 07D2                           l625 0794  
                         l619 07F0                           l627 07A0                           l629 07AF  
                         l595 078B                           l597 0780                           l599 0784  
            ?_read_ADC_result 0070                          _main 0794                          btemp 007E  
                        start 0000                         ?_main 0070           _wait_for_conversion 0784  
                       status 0003                         wtemp0 007E               __initialization 07FC  
             ??_configure_ADC 0070          ?_wait_for_conversion 0070                  __end_of_main 07C5  
                      ??_main 0072                        _ADCON0 001F                        _ADCON1 009F  
                      _ADRESH 001E                        _ADRESL 009E         ??_wait_for_conversion 0070  
__end_of_start_ADC_conversion 0784       __end_of__initialization 07FC                __pcstackCOMMON 0070  
                  __pmaintext 0794          _start_ADC_conversion 0780                       __ptext1 0784  
                     __ptext2 0780                       __ptext3 07C5                       __ptext4 078B  
        end_of_initialization 07FC         ?_start_ADC_conversion 0070         __end_of_configure_ADC 0794  
                   _PORTBbits 0006                     _TRISBbits 0086   __end_of_wait_for_conversion 078B  
           ??_read_ADC_result 0070           start_initialization 07FC        ??_start_ADC_conversion 0070  
                   ___latbits 0002                    _ADCON0bits 001F               _read_ADC_result 07C5  
     __end_of_read_ADC_result 07FC     read_ADC_result@ADC_result 0070                 _configure_ADC 078B  
